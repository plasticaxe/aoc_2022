#!/usr/bin/env ruby
# frozen_string_literal: true

require 'erb'
require 'fileutils'
require 'thor'

# ---
class CreateTemplates < Thor
  # ---
  class FileTemplates
    def initialize(year, day_number)
      @year       = year
      @day_number = day_number
    end

    def create_files
      create_lib_file
      create_input_files
      create_spec_file
    end

    private

    def project_root
      File.expand_path(File.dirname(File.dirname(__FILE__)))
    end

    def templates_directory
      File.join(project_root, 'resources', 'templates')
    end

    def create_lib_file
      lib_file = File.join(lib_dir, "day_#{@day_number}.rb")
      return if File.exist?(lib_file)

      File.open(lib_file, 'w') do |f|
        f << ERB.new(File.read(File.join(templates_directory, 'lib_aoc_YYYY_day_N.rb.erb'))).result(binding)
      end
    end

    def lib_dir
      @lib_dir ||= begin
        lib_dir = File.join(project_root, 'lib', "aoc_#{@year}")
        FileUtils.mkdir_p(lib_dir)
        lib_dir
      end
    end

    def create_input_files
      input_file = File.join(project_root, 'resources', 'input', "day_#{@day_number}.txt")
      FileUtils.touch(input_file) unless File.exist?(input_file)
      example_input_file = File.join(project_root, 'resources', 'input', "day_#{@day_number}_example.txt")
      FileUtils.touch(example_input_file) unless File.exist?(example_input_file)
    end

    def create_spec_file
      spec_file = File.join(project_root, 'spec', "aoc#{@year}_day_#{@day_number}_spec.rb")
      return if File.exist?(spec_file)

      File.open(spec_file, 'w') do |f|
        f << ERB.new(File.read(File.join(templates_directory, 'spec_aocYYYY_day_N_spec.rb.erb'))).result(binding)
      end
    end
  end

  class_option :year, default: Time.now.year.to_s, aliases: :y

  desc 'create_templates', %()

  def create_templates
    1.upto(25).each do |day|
      FileTemplates.new(options[:year], day.to_s.rjust(2, '0')).create_files
    end
  end

  default_task :create_templates
end

CreateTemplates.start(ARGV)
